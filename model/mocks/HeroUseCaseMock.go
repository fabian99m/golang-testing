// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	dto "dbtest/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// HeroUseCase is an autogenerated mock type for the HeroUseCase type
type HeroUseCase struct {
	mock.Mock
}

// GetAllHeros provides a mock function with given fields:
func (_m *HeroUseCase) GetAllHeros() dto.ResponseDto {
	ret := _m.Called()

	var r0 dto.ResponseDto
	if rf, ok := ret.Get(0).(func() dto.ResponseDto); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dto.ResponseDto)
	}

	return r0
}

// GetHeroById provides a mock function with given fields: id
func (_m *HeroUseCase) GetHeroById(id int) dto.ResponseDto {
	ret := _m.Called(id)

	var r0 dto.ResponseDto
	if rf, ok := ret.Get(0).(func(int) dto.ResponseDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto.ResponseDto)
	}

	return r0
}

// SaveHero provides a mock function with given fields: hero
func (_m *HeroUseCase) SaveHero(hero dto.HeroDto) dto.ResponseDto {
	ret := _m.Called(hero)

	var r0 dto.ResponseDto
	if rf, ok := ret.Get(0).(func(dto.HeroDto) dto.ResponseDto); ok {
		r0 = rf(hero)
	} else {
		r0 = ret.Get(0).(dto.ResponseDto)
	}

	return r0
}

type mockConstructorTestingTNewHeroUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewHeroUseCase creates a new instance of HeroUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHeroUseCase(t mockConstructorTestingTNewHeroUseCase) *HeroUseCase {
	mock := &HeroUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
