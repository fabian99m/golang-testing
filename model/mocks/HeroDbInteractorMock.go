// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	model "dbtest/model"

	mock "github.com/stretchr/testify/mock"
)

// HeroDbInteractor is an autogenerated mock type for the HeroDbInteractor type
type HeroDbInteractor struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *HeroDbInteractor) GetAll() ([]model.Hero, int64) {
	ret := _m.Called()

	var r0 []model.Hero
	if rf, ok := ret.Get(0).(func() []model.Hero); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Hero)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *HeroDbInteractor) GetById(id int) (model.Hero, int64) {
	ret := _m.Called(id)

	var r0 model.Hero
	if rf, ok := ret.Get(0).(func(int) model.Hero); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Hero)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(int) int64); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// Save provides a mock function with given fields: hero
func (_m *HeroDbInteractor) Save(hero *model.Hero) int64 {
	ret := _m.Called(hero)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*model.Hero) int64); ok {
		r0 = rf(hero)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

type mockConstructorTestingTNewHeroDbInteractor interface {
	mock.TestingT
	Cleanup(func())
}

// NewHeroDbInteractor creates a new instance of HeroDbInteractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHeroDbInteractor(t mockConstructorTestingTNewHeroDbInteractor) *HeroDbInteractor {
	mock := &HeroDbInteractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
